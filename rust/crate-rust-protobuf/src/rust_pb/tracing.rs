// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/tracing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Log {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // message oneof groups
    pub event: ::std::option::Option<Log_oneof_event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log {
    fn default() -> &'a Log {
        <Log as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Log_oneof_event {
    node_started(Log_NodeStarted),
    send_whoareyou(Log_SendWhoAreYou),
    send_ordinary_message(Log_SendOrdinaryMessage),
}

impl Log {
    pub fn new() -> Log {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .tracing.Log.NodeStarted node_started = 2;


    pub fn get_node_started(&self) -> &Log_NodeStarted {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::node_started(ref v)) => v,
            _ => <Log_NodeStarted as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_node_started(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_node_started(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::node_started(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node_started(&mut self, v: Log_NodeStarted) {
        self.event = ::std::option::Option::Some(Log_oneof_event::node_started(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node_started(&mut self) -> &mut Log_NodeStarted {
        if let ::std::option::Option::Some(Log_oneof_event::node_started(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(Log_oneof_event::node_started(Log_NodeStarted::new()));
        }
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::node_started(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node_started(&mut self) -> Log_NodeStarted {
        if self.has_node_started() {
            match self.event.take() {
                ::std::option::Option::Some(Log_oneof_event::node_started(v)) => v,
                _ => panic!(),
            }
        } else {
            Log_NodeStarted::new()
        }
    }

    // .tracing.Log.SendWhoAreYou send_whoareyou = 3;


    pub fn get_send_whoareyou(&self) -> &Log_SendWhoAreYou {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_whoareyou(ref v)) => v,
            _ => <Log_SendWhoAreYou as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_send_whoareyou(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_send_whoareyou(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_whoareyou(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_send_whoareyou(&mut self, v: Log_SendWhoAreYou) {
        self.event = ::std::option::Option::Some(Log_oneof_event::send_whoareyou(v))
    }

    // Mutable pointer to the field.
    pub fn mut_send_whoareyou(&mut self) -> &mut Log_SendWhoAreYou {
        if let ::std::option::Option::Some(Log_oneof_event::send_whoareyou(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(Log_oneof_event::send_whoareyou(Log_SendWhoAreYou::new()));
        }
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_whoareyou(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_send_whoareyou(&mut self) -> Log_SendWhoAreYou {
        if self.has_send_whoareyou() {
            match self.event.take() {
                ::std::option::Option::Some(Log_oneof_event::send_whoareyou(v)) => v,
                _ => panic!(),
            }
        } else {
            Log_SendWhoAreYou::new()
        }
    }

    // .tracing.Log.SendOrdinaryMessage send_ordinary_message = 4;


    pub fn get_send_ordinary_message(&self) -> &Log_SendOrdinaryMessage {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(ref v)) => v,
            _ => <Log_SendOrdinaryMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_send_ordinary_message(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_send_ordinary_message(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_send_ordinary_message(&mut self, v: Log_SendOrdinaryMessage) {
        self.event = ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_send_ordinary_message(&mut self) -> &mut Log_SendOrdinaryMessage {
        if let ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(Log_SendOrdinaryMessage::new()));
        }
        match self.event {
            ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_send_ordinary_message(&mut self) -> Log_SendOrdinaryMessage {
        if self.has_send_ordinary_message() {
            match self.event.take() {
                ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(v)) => v,
                _ => panic!(),
            }
        } else {
            Log_SendOrdinaryMessage::new()
        }
    }
}

impl ::protobuf::Message for Log {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Log_oneof_event::node_started(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Log_oneof_event::send_whoareyou(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Log_oneof_event::send_ordinary_message(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(Log_oneof_event::node_started(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(Log_oneof_event::send_whoareyou(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(Log_oneof_event::send_ordinary_message(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &Log_oneof_event::node_started(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Log_oneof_event::send_whoareyou(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Log_oneof_event::send_ordinary_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &Log_oneof_event::node_started(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Log_oneof_event::send_whoareyou(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Log_oneof_event::send_ordinary_message(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log {
        Log::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &Log| { &m.timestamp },
                |m: &mut Log| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Log_NodeStarted>(
                "node_started",
                Log::has_node_started,
                Log::get_node_started,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Log_SendWhoAreYou>(
                "send_whoareyou",
                Log::has_send_whoareyou,
                Log::get_send_whoareyou,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Log_SendOrdinaryMessage>(
                "send_ordinary_message",
                Log::has_send_ordinary_message,
                Log::get_send_ordinary_message,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log>(
                "Log",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log {
        static instance: ::protobuf::rt::LazyV2<Log> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log::new)
    }
}

impl ::protobuf::Clear for Log {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log_NodeStarted {
    // message fields
    pub node_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log_NodeStarted {
    fn default() -> &'a Log_NodeStarted {
        <Log_NodeStarted as ::protobuf::Message>::default_instance()
    }
}

impl Log_NodeStarted {
    pub fn new() -> Log_NodeStarted {
        ::std::default::Default::default()
    }

    // string node_id = 1;


    pub fn get_node_id(&self) -> &str {
        &self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: ::std::string::String) {
        self.node_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_id(&mut self) -> &mut ::std::string::String {
        &mut self.node_id
    }

    // Take field
    pub fn take_node_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Log_NodeStarted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.node_id.is_empty() {
            os.write_string(1, &self.node_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log_NodeStarted {
        Log_NodeStarted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "node_id",
                |m: &Log_NodeStarted| { &m.node_id },
                |m: &mut Log_NodeStarted| { &mut m.node_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log_NodeStarted>(
                "Log.NodeStarted",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log_NodeStarted {
        static instance: ::protobuf::rt::LazyV2<Log_NodeStarted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log_NodeStarted::new)
    }
}

impl ::protobuf::Clear for Log_NodeStarted {
    fn clear(&mut self) {
        self.node_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log_NodeStarted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log_NodeStarted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log_SendWhoAreYou {
    // message fields
    pub sender: ::std::string::String,
    pub recipient: ::std::string::String,
    pub id_nonce: u64,
    pub enr_seq: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log_SendWhoAreYou {
    fn default() -> &'a Log_SendWhoAreYou {
        <Log_SendWhoAreYou as ::protobuf::Message>::default_instance()
    }
}

impl Log_SendWhoAreYou {
    pub fn new() -> Log_SendWhoAreYou {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string recipient = 2;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // uint64 id_nonce = 3;


    pub fn get_id_nonce(&self) -> u64 {
        self.id_nonce
    }
    pub fn clear_id_nonce(&mut self) {
        self.id_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_id_nonce(&mut self, v: u64) {
        self.id_nonce = v;
    }

    // uint64 enr_seq = 4;


    pub fn get_enr_seq(&self) -> u64 {
        self.enr_seq
    }
    pub fn clear_enr_seq(&mut self) {
        self.enr_seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_enr_seq(&mut self, v: u64) {
        self.enr_seq = v;
    }
}

impl ::protobuf::Message for Log_SendWhoAreYou {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id_nonce = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.enr_seq = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.recipient);
        }
        if self.id_nonce != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.enr_seq != 0 {
            my_size += ::protobuf::rt::value_size(4, self.enr_seq, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(2, &self.recipient)?;
        }
        if self.id_nonce != 0 {
            os.write_uint64(3, self.id_nonce)?;
        }
        if self.enr_seq != 0 {
            os.write_uint64(4, self.enr_seq)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log_SendWhoAreYou {
        Log_SendWhoAreYou::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &Log_SendWhoAreYou| { &m.sender },
                |m: &mut Log_SendWhoAreYou| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient",
                |m: &Log_SendWhoAreYou| { &m.recipient },
                |m: &mut Log_SendWhoAreYou| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id_nonce",
                |m: &Log_SendWhoAreYou| { &m.id_nonce },
                |m: &mut Log_SendWhoAreYou| { &mut m.id_nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "enr_seq",
                |m: &Log_SendWhoAreYou| { &m.enr_seq },
                |m: &mut Log_SendWhoAreYou| { &mut m.enr_seq },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log_SendWhoAreYou>(
                "Log.SendWhoAreYou",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log_SendWhoAreYou {
        static instance: ::protobuf::rt::LazyV2<Log_SendWhoAreYou> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log_SendWhoAreYou::new)
    }
}

impl ::protobuf::Clear for Log_SendWhoAreYou {
    fn clear(&mut self) {
        self.sender.clear();
        self.recipient.clear();
        self.id_nonce = 0;
        self.enr_seq = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log_SendWhoAreYou {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log_SendWhoAreYou {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log_SendOrdinaryMessage {
    // message fields
    pub sender: ::std::string::String,
    pub recipient: ::std::string::String,
    // message oneof groups
    pub message: ::std::option::Option<Log_SendOrdinaryMessage_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log_SendOrdinaryMessage {
    fn default() -> &'a Log_SendOrdinaryMessage {
        <Log_SendOrdinaryMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Log_SendOrdinaryMessage_oneof_message {
    find_node(Log_SendOrdinaryMessage_FindNode),
    nodes(Log_SendOrdinaryMessage_Nodes),
}

impl Log_SendOrdinaryMessage {
    pub fn new() -> Log_SendOrdinaryMessage {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string recipient = 2;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // .tracing.Log.SendOrdinaryMessage.FindNode find_node = 3;


    pub fn get_find_node(&self) -> &Log_SendOrdinaryMessage_FindNode {
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(ref v)) => v,
            _ => <Log_SendOrdinaryMessage_FindNode as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_find_node(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_find_node(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_find_node(&mut self, v: Log_SendOrdinaryMessage_FindNode) {
        self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_find_node(&mut self) -> &mut Log_SendOrdinaryMessage_FindNode {
        if let ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(Log_SendOrdinaryMessage_FindNode::new()));
        }
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_find_node(&mut self) -> Log_SendOrdinaryMessage_FindNode {
        if self.has_find_node() {
            match self.message.take() {
                ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(v)) => v,
                _ => panic!(),
            }
        } else {
            Log_SendOrdinaryMessage_FindNode::new()
        }
    }

    // .tracing.Log.SendOrdinaryMessage.Nodes nodes = 4;


    pub fn get_nodes(&self) -> &Log_SendOrdinaryMessage_Nodes {
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(ref v)) => v,
            _ => <Log_SendOrdinaryMessage_Nodes as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_nodes(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_nodes(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: Log_SendOrdinaryMessage_Nodes) {
        self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut Log_SendOrdinaryMessage_Nodes {
        if let ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(Log_SendOrdinaryMessage_Nodes::new()));
        }
        match self.message {
            ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nodes(&mut self) -> Log_SendOrdinaryMessage_Nodes {
        if self.has_nodes() {
            match self.message.take() {
                ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(v)) => v,
                _ => panic!(),
            }
        } else {
            Log_SendOrdinaryMessage_Nodes::new()
        }
    }
}

impl ::protobuf::Message for Log_SendOrdinaryMessage {
    fn is_initialized(&self) -> bool {
        if let Some(Log_SendOrdinaryMessage_oneof_message::find_node(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Log_SendOrdinaryMessage_oneof_message::nodes(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::find_node(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(Log_SendOrdinaryMessage_oneof_message::nodes(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.recipient);
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Log_SendOrdinaryMessage_oneof_message::find_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Log_SendOrdinaryMessage_oneof_message::nodes(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(2, &self.recipient)?;
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &Log_SendOrdinaryMessage_oneof_message::find_node(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Log_SendOrdinaryMessage_oneof_message::nodes(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log_SendOrdinaryMessage {
        Log_SendOrdinaryMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &Log_SendOrdinaryMessage| { &m.sender },
                |m: &mut Log_SendOrdinaryMessage| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient",
                |m: &Log_SendOrdinaryMessage| { &m.recipient },
                |m: &mut Log_SendOrdinaryMessage| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Log_SendOrdinaryMessage_FindNode>(
                "find_node",
                Log_SendOrdinaryMessage::has_find_node,
                Log_SendOrdinaryMessage::get_find_node,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Log_SendOrdinaryMessage_Nodes>(
                "nodes",
                Log_SendOrdinaryMessage::has_nodes,
                Log_SendOrdinaryMessage::get_nodes,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log_SendOrdinaryMessage>(
                "Log.SendOrdinaryMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log_SendOrdinaryMessage {
        static instance: ::protobuf::rt::LazyV2<Log_SendOrdinaryMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log_SendOrdinaryMessage::new)
    }
}

impl ::protobuf::Clear for Log_SendOrdinaryMessage {
    fn clear(&mut self) {
        self.sender.clear();
        self.recipient.clear();
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log_SendOrdinaryMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log_SendOrdinaryMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log_SendOrdinaryMessage_FindNode {
    // message fields
    pub request_id: ::std::string::String,
    pub distances: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log_SendOrdinaryMessage_FindNode {
    fn default() -> &'a Log_SendOrdinaryMessage_FindNode {
        <Log_SendOrdinaryMessage_FindNode as ::protobuf::Message>::default_instance()
    }
}

impl Log_SendOrdinaryMessage_FindNode {
    pub fn new() -> Log_SendOrdinaryMessage_FindNode {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // repeated uint32 distances = 2;


    pub fn get_distances(&self) -> &[u32] {
        &self.distances
    }
    pub fn clear_distances(&mut self) {
        self.distances.clear();
    }

    // Param is passed by value, moved
    pub fn set_distances(&mut self, v: ::std::vec::Vec<u32>) {
        self.distances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_distances(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.distances
    }

    // Take field
    pub fn take_distances(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.distances, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Log_SendOrdinaryMessage_FindNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.distances)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        for value in &self.distances {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        for v in &self.distances {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log_SendOrdinaryMessage_FindNode {
        Log_SendOrdinaryMessage_FindNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &Log_SendOrdinaryMessage_FindNode| { &m.request_id },
                |m: &mut Log_SendOrdinaryMessage_FindNode| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "distances",
                |m: &Log_SendOrdinaryMessage_FindNode| { &m.distances },
                |m: &mut Log_SendOrdinaryMessage_FindNode| { &mut m.distances },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log_SendOrdinaryMessage_FindNode>(
                "Log.SendOrdinaryMessage.FindNode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log_SendOrdinaryMessage_FindNode {
        static instance: ::protobuf::rt::LazyV2<Log_SendOrdinaryMessage_FindNode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log_SendOrdinaryMessage_FindNode::new)
    }
}

impl ::protobuf::Clear for Log_SendOrdinaryMessage_FindNode {
    fn clear(&mut self) {
        self.request_id.clear();
        self.distances.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log_SendOrdinaryMessage_FindNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log_SendOrdinaryMessage_FindNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log_SendOrdinaryMessage_Nodes {
    // message fields
    pub request_id: ::std::string::String,
    pub total: i32,
    pub nodes: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log_SendOrdinaryMessage_Nodes {
    fn default() -> &'a Log_SendOrdinaryMessage_Nodes {
        <Log_SendOrdinaryMessage_Nodes as ::protobuf::Message>::default_instance()
    }
}

impl Log_SendOrdinaryMessage_Nodes {
    pub fn new() -> Log_SendOrdinaryMessage_Nodes {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // int32 total = 2;


    pub fn get_total(&self) -> i32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i32) {
        self.total = v;
    }

    // repeated string nodes = 3;


    pub fn get_nodes(&self) -> &[::std::string::String] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Log_SendOrdinaryMessage_Nodes {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.nodes {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if self.total != 0 {
            os.write_int32(2, self.total)?;
        }
        for v in &self.nodes {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log_SendOrdinaryMessage_Nodes {
        Log_SendOrdinaryMessage_Nodes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &Log_SendOrdinaryMessage_Nodes| { &m.request_id },
                |m: &mut Log_SendOrdinaryMessage_Nodes| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total",
                |m: &Log_SendOrdinaryMessage_Nodes| { &m.total },
                |m: &mut Log_SendOrdinaryMessage_Nodes| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nodes",
                |m: &Log_SendOrdinaryMessage_Nodes| { &m.nodes },
                |m: &mut Log_SendOrdinaryMessage_Nodes| { &mut m.nodes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log_SendOrdinaryMessage_Nodes>(
                "Log.SendOrdinaryMessage.Nodes",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log_SendOrdinaryMessage_Nodes {
        static instance: ::protobuf::rt::LazyV2<Log_SendOrdinaryMessage_Nodes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log_SendOrdinaryMessage_Nodes::new)
    }
}

impl ::protobuf::Clear for Log_SendOrdinaryMessage_Nodes {
    fn clear(&mut self) {
        self.request_id.clear();
        self.total = 0;
        self.nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log_SendOrdinaryMessage_Nodes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log_SendOrdinaryMessage_Nodes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/tracing.proto\x12\x07tracing\x1a\x1fgoogle/protobuf/timestam\
    p.proto\"\xc7\x06\n\x03Log\x128\n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.g\
    oogle.protobuf.TimestampR\ttimestamp\x12=\n\x0cnode_started\x18\x02\x20\
    \x01(\x0b2\x18.tracing.Log.NodeStartedH\0R\x0bnodeStarted\x12C\n\x0esend\
    _whoareyou\x18\x03\x20\x01(\x0b2\x1a.tracing.Log.SendWhoAreYouH\0R\rsend\
    Whoareyou\x12V\n\x15send_ordinary_message\x18\x04\x20\x01(\x0b2\x20.trac\
    ing.Log.SendOrdinaryMessageH\0R\x13sendOrdinaryMessage\x1a&\n\x0bNodeSta\
    rted\x12\x17\n\x07node_id\x18\x01\x20\x01(\tR\x06nodeId\x1ay\n\rSendWhoA\
    reYou\x12\x16\n\x06sender\x18\x01\x20\x01(\tR\x06sender\x12\x1c\n\trecip\
    ient\x18\x02\x20\x01(\tR\trecipient\x12\x19\n\x08id_nonce\x18\x03\x20\
    \x01(\x04R\x07idNonce\x12\x17\n\x07enr_seq\x18\x04\x20\x01(\x04R\x06enrS\
    eq\x1a\xfd\x02\n\x13SendOrdinaryMessage\x12\x16\n\x06sender\x18\x01\x20\
    \x01(\tR\x06sender\x12\x1c\n\trecipient\x18\x02\x20\x01(\tR\trecipient\
    \x12H\n\tfind_node\x18\x03\x20\x01(\x0b2).tracing.Log.SendOrdinaryMessag\
    e.FindNodeH\0R\x08findNode\x12>\n\x05nodes\x18\x04\x20\x01(\x0b2&.tracin\
    g.Log.SendOrdinaryMessage.NodesH\0R\x05nodes\x1aG\n\x08FindNode\x12\x1d\
    \n\nrequest_id\x18\x01\x20\x01(\tR\trequestId\x12\x1c\n\tdistances\x18\
    \x02\x20\x03(\rR\tdistances\x1aR\n\x05Nodes\x12\x1d\n\nrequest_id\x18\
    \x01\x20\x01(\tR\trequestId\x12\x14\n\x05total\x18\x02\x20\x01(\x05R\x05\
    total\x12\x14\n\x05nodes\x18\x03\x20\x03(\tR\x05nodesB\t\n\x07messageB\
    \x07\n\x05eventb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
