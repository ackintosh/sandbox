# 参考URL
# * https://knowledge.sakura.ad.jp/23478/

# チートシート
# * https://github.com/github/actions-cheat-sheet/blob/master/actions-cheat-sheet.pdf

# Workflowのシンタックス
# * https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

# 必須項目は `on` と `runs-on` の2つ


# ワークフロー名
name: Workflow for sandbox

# 環境変数
env:
  MESSAGE1: "Hello"
  MESSAGE2: "GitHub Actions"

#################################################################################################################
# on (*必須要素)
# 
# 指定できるイベント:
# * https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows
#   → GitHub Webhookで定義されているイベントと同じものが指定可能
#     https://developer.github.com/webhooks/#events
#################################################################################################################
# *** push と pull_request ではジョブで扱うソースコードが異なる ***
# * push:
#   * 単純に、そのブランチのソースコード.
#   * featureブランチなら、featureブランチのソースコード
#   * Actionsのcheckoutのログから、下記のようにブランチがチェックアウトされていることがわかる
#     * /usr/bin/git ..(略).. --depth=1 origin +8dbd573c88b01e51fd10546a927b685591b2eced:refs/remotes/origin/testactions
# * pull_request:
#   * そのブランチと、(その時点の)マージ先ブランチを "マージしたソースコード" (pull/xxx/mergeブランチ)
#   * Actionsのcheckoutのログから、下記のようにmergeブランチがチェックアウトされていることがわかる
#     * /usr/bin/git ..(略).. --depth=1 origin +91775586d19b0d02440ef913836a5b3539e09d42:refs/remotes/pull/27/merge
on: [push, pull_request]

# <リスト形式で複数のイベントを指定できる>
#
# on: [create, delete]

# <特定のブランチやタグを対象に指定できる>
# `*` や `**` といったワイルドカードが使える
#
# on:
#   push:
#     branches:
#       - master
#       - releases/* # リリースブランチを指定
#       - !releases/**-alfa # アルファ版は除外する

# <サブタイプを持つイベントもある>
# `type` 要素を指定することで特定のサブタイプにマッチするイベントをトリガーにできる
#
# on:
#   issues:
#     types: [opened, reopened] # issueのオープン(opened)もしくは再オープン(reopened)にワークフローを実行する場合

# <決まった日時にワークフローを実行できる>
# cronと同じ形式(「<分> ＜時＞ ＜日＞ ＜月＞ ＜曜日＞」で指定する場合
# on:
#   schedule:
#     - cron: '30 * * * *' # 毎時30分にワークフローを実行する

# <特定のファイルタイプの編集をトリガーにしてワークフローを実行できる>
# ktファイルが編集された場合にワークフローを実行する
#
# on:
#   pull_request:
#     paths:
#       - '**.kt'


#################################################################################################################
# 実行する処理
# * 定義されたジョブは基本的に並列に事項される
# * ジョブの依存関係は `jobs.＜ジョブID＞.needs` で定義する
#   * https://help.github.com/ja/actions/reference/workflow-syntax-for-github-actions#
#################################################################################################################
jobs:
  # <ジョブID>
  # * ジョブを参照するときに使われる一意な文字列
  sandboxJob:
    # <ジョブ名>
    # * 管理画面などに表示される
    name: sandbox job name
    # <実行する仮想マシンを指定する>
    # (*必須要素)
    #
    # 指定できる仮想マシン:
    # * 下記の `runs-on` を参照
    # * https://github.com/github/actions-cheat-sheet/blob/master/actions-cheat-sheet.pdf
    runs-on: ubuntu-18.04
    # <各ジョブで実行する処理>
    # * 指定された順序で実行される
    steps:
      - name: name for step1
        run: echo $MESSAGE1 # `env` で設定した環境変数を出力する
        # シェルを指定
        shell: bash # デフォルトで `bash`、Windowsの場合は `PowerShell`
      - name: name for step2
        run: sleep 3
      - name: name for step3
        run: echo $MESSAGE2
      # <`uses` で、任意のActionを実行する>
      # * 実行するActionを「＜オーナー＞/＜リポジトリ＞/＜パス＞@＜タグ|ブランチ|リファレンス＞」の形で指定する
      #   * (パスや@以下については省略可能)
      # * `uses`を指定する場合、`name`を省略することが多い
      #   * その場合はAction名が名前として指定されたことになる
      - uses: actions/checkout@v2

      # #############################################
      # 別のリポジトリ(private)をチェックアウトする
      # https://github.com/actions/checkout#checkout-multiple-repos-private
      # * PATに repo フル権限を付ける必要がある(*)ので一旦コメントアウト
      #   * (*) おそらくprivateリポジトリをチェックアウトしようとしているのが理由
      #   * セキュリティの観点で良くない
      #     公開リポジトリのワークフローで、repoのフル権限を付けたトークンを扱うことは、
      #     全コラボレータに、その権限を解放してしまっているのと同様の状態
      # * deploy keysを使うのが良いかもしれない
      #   * https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#considering-cross-repository-access
      #     > If a personal access token is used, it should be one that was generated for a new account that is only granted access to the specific repositories that are needed for the workflow. Note that this approach is not scalable and should be avoided in favor of alternatives, such as deploy keys.
      #   * deploy keysなら、特定のリポジトリ(private含む)の権限だけを持たせたアクセスコントロールが可能と思われる
      #     https://docs.github.com/ja/developers/overview/managing-deploy-keys#deploy-keys
      #     https://github.community/t/github-actions-ci-how-to-use-store-deploy-key-to-download-from-another-private-repo/16113/7
      # #############################################
      # - name: Checkout an another repository
      #   uses: actions/checkout@v2
      #   with:
      #     repository: ackintosh/test
      #     token: ${{ secrets.PAT }}
      #     path: private_test

        # `with` でActionsに渡すパラメータを指定する
        # リポジトリ内のfooブランチをチェックアウトする場合
        # with:
        #   ref: foo
      # <`uses` で、特定のコンテナ内で処理を実行する>
      - name: run busybox
        uses: docker://busybox:latest
        with:
          # `entrypoint` や `args` でコンテナを実行する際のエントリーポイントや引数を指定する
          # entrypoint: ls
          args: echo Hello from busybox
      - name: ls
        uses: docker://busybox:latest
        with:
          # working-directoryがコンテナに同期されているのが確認できる
          # 前のstepでチェックアウトした private_test にもアクセスできる
          args: ls -l

  #####################################################################
  # ジョブの依存関係を指定していないので `sandboxJob` と並列に実行される
  #####################################################################
  runsConcurrently:
    name: this job shows that the jobs are run concurrently
    runs-on: ubuntu-18.04
    steps:
      - name: name for step1
        run: echo $MESSAGE1
      - name: name for step2
        run: sleep 3
      - name: name for step3
        run: echo $MESSAGE2 from "runsConcurrently"

  #####################################################################
  # `needs` で依存関係を指定したジョブ
  #####################################################################
  dependsOnSandboxJob:
    name: depends on sandboxJob
    needs: sandboxJob # `sandboxJob` に依存する
    runs-on: ubuntu-18.04
    steps:
      - name: name for step1
        # 複数行のコマンドを実行する場合はYAMLのブロックスタイル式 `|` の記述をする
        run: |
          echo Hello \
               from \
               dependsOnSandboxJob

  #####################################################################
  # ジョブ全体を特定のコンテナで実行する
  # * `jobs.＜ジョブID＞.container` でコンテナを指定する
  #####################################################################
  runInContainer:
    name: this job runs in container that specified in the `container` parameter
    runs-on: ubuntu-18.04
    # コンテナを指定する
    # * 各ステップで明示的にコンテナが指定されない限り、ここで指定したコンテナ内で各ステップの処理が実行される
    container:
      image: busybox:latest
      env:
        MESSAGE: Hello from busybox
      # ports:
      # volumes:
      # options: 
    steps:
      - name: greetings
        run: echo $MESSAGE # `container.env` で設定した環境変数を出力する

  #####################################################################
  # 各ステップとは並列に動作するコンテナを起動する
  # * `jobs.＜ジョブID＞.services`
  # * テスト用のデータベースなどを起動しておく
  # 
  # * サービスコンテナについて - GitHub Docs
  # https://docs.github.com/ja/free-pro-team@latest/actions/guides/about-service-containers
  #
  # * Redisサービスコンテナの作成 - GitHub Docs
  # https://docs.github.com/ja/free-pro-team@latest/actions/guides/creating-redis-service-containers
  #
  # * PostgreSQLサービスコンテナの作成 - GitHub Docs
  # https://docs.github.com/ja/free-pro-team@latest/actions/guides/creating-postgresql-service-containers
  #
  # * 各種ストレージのserviceを使っている例
  # https://github.com/symfony/symfony/blob/5.x/.github/workflows/tests.yml
  #####################################################################
  runServices:
    name: A job using Redis service
    runs-on: ubuntu-18.04
    services:
      redis-service: # サービス名
        # 以下のパラメータは `container` と同じ
        image: redis:latest
    steps:
      - name: set a greeting message to the Redis server
        uses: docker://redis:latest
        with:
          # usersで指定したDockerコンテナからアクセスするので、`redis-service` で名前解決できる
          # -> Dockerコンテナを使わず、直接ランナーマシン上で実行する場合は `localhost` でアクセスする
          args: sh -c "echo 'SET greetings Hello!' | redis-cli -h redis-service -p 6379"
      - name: get the greeting message which is set by the previous step
        uses: docker://redis:latest
        with:
          args: sh -c "echo 'GET greetings' | redis-cli -h redis-service -p 6379"

  #####################################################################
  # 実行時の情報を利用する
  # * `${{コンテキスト名}}` で実行時情報にアクセスできる
  # * 利用できる情報は下記のドキュメントを参照
  #   * https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions
  #####################################################################
  useContexts:
    name: use contexts
    runs-on: ubuntu-18.04
    steps:
      - name: print contexts
        run: |
          echo ${{ github.workflow }} &&
          echo ${{ github.repository }} &&
          echo ${{ github.sha }}

  #####################################################################
  # プラットフォームやバージョンを変えながら同じ処理を実行する
  # * build matrix
  #####################################################################
  buildMatrix:
    name: use build matrix
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        version: [1, 2, 3]
    steps:
      - name: print the version
        run: echo version ${{ matrix.version }}
  buildMatrixCombination:
    name: build matrix combination
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04]
        version: [1, 2, 3]
    steps:
      - name: print the combination
        run: echo os ${{ matrix.os }}  version ${{ matrix.version }}

  #####################################################################
  # リポジトリのenvファイルから環境変数を設定する
  # https://docs.github.com/ja/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
  #####################################################################
  setEnvironmentVariableFromFile:
    name: set env var
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: print empty values
        run: echo "before -> " && echo "$foo $bar $baz" && echo "."
      - name: set env var
        run: cat sandbox.env | grep -v '^#' >> $GITHUB_ENV
      - name: print the env var
        run: echo "after -> " && echo "$foo $bar $baz" && echo "."

