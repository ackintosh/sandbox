# サービス名
service: appsync-sample-with-serverless
provider:
  name: aws
  # ステージ、デプロイ先を開発、運用などで分けたい場合はココを切り替えます
  stage: production
  # デプロイ先のリージョンです
  region: ap-northeast-1
# AppSyncのプラグインを指定します
plugins:
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-dynamodb-local
    #- serverless-offline

# プラグイン関連の設定はcustomで行います
custom:
  # Offline support
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
      #migrate: true
      #seed: true
    #seed:
    #  test:
    #    sources:
    #      - table: Users
    #        sources: [seed-data/Users.json]	
    #      - table: Tweets
    #        sources: [seed-data/Tweets.json]
  # ここでAppSyncの設定を行います
  appSync:
    # エンドポイントの名前を指定します
    name: appsync-serverless-sample
    # AppSyncの認証方法を指定します
    authenticationType: API_KEY
    # ここではCognitoによる認証方法を指定しています
    # Cogtnitoによる認証方法の場合、Cognito側の情報を指定する必要があります
    #userPoolConfig:
    #  # Cognitoが存在するリージョンを指定します
    #  # デフォルトだとproviderのregionで指定した値になります
    #  awsRegion: ap-northeast-1
    #  # CognitoのユーザープールのIDを指定します
    #  userPoolId: ap-northeast-1_U0e7zFRLQ
    #  # スキーマ定義で認証設定が記述されていない場合の挙動を指定します
    #  # DENYを指定すると、認証されたいかなるユーザーも認可エラーに倒します
    #  defaultAction: DENY
    # AppSyncのスキーマ定義ファイルのパスを指定します
    # デフォルトだとschema.graphqlです
    schema: schema.graphql
    # データソースを指定します(複数指定可能)
    dataSources:
      # データソースの型を指定します
      # 以下が指定できます
      # AMAZON_DYNAMODB ・・・DynamoDB
      # AMAZON_ELASTICSEARCH ・・・Elasticsearch
      # AWS_LAMBDA ・・・Lambda関数
      - type: AMAZON_DYNAMODB
        # データソース名を指定します
        name: dynamo_user
        # DynamoDBのテーブルの説明を指定します
        description: 'ユーザー情報テーブル'
        config:
          # 参照するテーブル名を指定します
          tableName: dynamo_user
          # データソースのロールARNを指定します
          serviceRoleArn: arn:aws:iam::999999999999:role/sample_role_arn
          # データソースのリージョンを指定します
          # デフォルトだとproviderのregionで指定した値になります
          region: ap-northeast-1
    # マッピングテンプレートのVTLファイルの格納先を指定します
    # デフォルトはmapping-templatesです
    mappingTemplatesLocation: mapping-templates
    # リゾルバー定義を指定します
    # ※ここではPipeline Resolverの例を示します
    mappingTemplates:
        # リゾルバーの方を指定します
      - type: Query
        # リゾルバーを紐づけるスキーマ中のフィールド名を指定します
        field: user
        # Pipeline Resolverを使い場合、以下を指定します
        kind: PIPELINE
        # リクエストマッピングテンプレートのファイルパスを指定します
        # ファイルパスはmappingTemplatesLocationで指定したパスからの相対パスになります
        request: 'start.vtl'
        # レスポンスマッピングテンプレートのファイルパスを指定します
        response: 'end.vtl'
        # リゾルバーで使う関数を実行順に指定します
        functions:
          - GetUser
    # 関数定義を指定します
    functionConfigurations:
        # ユーザー一覧取得
        # 関数で扱うデータソース名を指定します
      - dataSource: dynamo_user
        # 関数名を指定します
        name: 'GetUser'
        # 関数のリクエストマッピングテンプレートのファイルパスを指定します
        # ファイルパスはmappingTemplatesLocationで指定したパスからの相対パスになります
        request: 'GetUser.req.vtl'
        # 関数のレスポンスマッピングテンプレートのファイルパスを指定します
        response: 'GetUser.res.vtl'
